@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin tap($tap-color){
	& {
		-webkit-tap-highlight-color: $tap-color;
	}
	&:active {
		background-color: $tap-color;
	}
}

@mixin placeholder{
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}

//@include box-sizing(border-box);
@mixin box-sizing($bs) {
	-webkit-box-sizing: $bs; 
	-moz-box-sizing: $bs; 
	box-sizing: $bs;
}

@mixin box-shadow($bs){
	-webkit-box-shadow: $bs;
	-moz-box-shadow: $bs;
	box-shadow: $bs;
}

//@include opacity(100);
@mixin opacity($level) {
	$pval : $level*100;
	filter: alpha(opacity = $pval);
	opacity: $level;
}

//@include transition(padding, 1s, ease-in-out);
@mixin transition($properties: all, $duration: 180ms, $easing: ease-out) {
@if length($properties) > 1 {
		-webkit-transition-property: $properties;
		-webkit-transition-duration: $duration;
		-webkit-transition-timing-function: $easing;
		transition-property: $properties;
		transition-duration: $duration;
		transition-timing-function: $easing;
	} @else {
		-webkit-transition: $properties $duration $easing;
		transition: $properties $duration $easing;
	}
}

@mixin transition-double($transition,$transition2) {
	-webkit-transition: $transition,$transition2;
	-moz-transition: $transition,$transition2;
	-ms-transition: $transition,$transition2;
	-o-transition: $transition,$transition2;
	transition: $transition,$transition2;
}

//@include linear-gradient(#FFF, #000);
@mixin linear-gradient($fromColor, $toColor) {
	background-color: $toColor;
	background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
	background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
	background-image: -moz-linear-gradient(top, $fromColor, $toColor);
	background-image: -ms-linear-gradient(top, $fromColor, $toColor);
	background-image: -o-linear-gradient(top, $fromColor, $toColor);
	background-image: linear-gradient(top, $fromColor, $toColor);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='$fromColor', EndColorStr='$toColor');
}

//@include transform()
@mixin transform($transform) {
    -webkit-transform: $transform;
    -moz-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}

//@include rounded(6px);
@mixin rounded($radius:6px) {
	border-radius: $radius;
}

//@include breakpoint(palm) {background: #FFF;}
@mixin breakpoint($point) {
	@if $fix-mqs {
		@if $point != wide {
			@content
		}
	} @else {
		// 320
		@if $point == palm {
			@media (min-width: $palmWidth) { @content; }
		}
		// 480
		@else if $point == portable {
			@media (min-width: $portableWidth) { @content; }
		}
		// 769
		@else if $point == lap {
			@media (min-width: $lapWidth) { @content; }
		}
		// 960
		@else if $point == desk {
			@media (min-width: $deskWidth)  { @content; }
		}
		// 1180
		@else if $point == wide {
			@media (min-width: $wideWidth)  { @content; }
		}
	}
}

//@include retina() {background: #000;}
@mixin retina() {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) { @content; }
}

//@include font-size()
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

//@include hoverActiveFocus() {color: #F00;}
@mixin hoverActiveFocus {
    &:hover, &:active, &:focus {
        @content;
    }
}

//@include blur(5px)
@mixin blur($amount) {
	-webkit-filter: blur($amount);
	-moz-filter: blur($amount);
	-o-filter: blur($amount);
	-ms-filter: blur($amount);
	filter: blur($amount);
	-webkit-backface-visibility: hidden;
	-webkit-perspective: 1000;
}

//@include position(absolute, 0px, 0px, 0px, 0px)
@mixin position($position, $top: auto, $left: auto, $bottom: auto, $right: auto) {
	position: $position;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

//@include transform3d()
@mixin transform3d($x, $y, $z) {
	-webkit-transform: translate3d($x, $y, $z);
	-moz-transform: translate3d($x, $y, $z);
	-ms-transform: translate3d($x, $y, $z);
	transform: translate3d($x, $y, $z);
	
	-webkit-backface-visibility: hidden;
	-moz-backface-visibility: hidden;
	-ms-backface-visibility: hidden;
	-webkit-perspective: 1000;
}